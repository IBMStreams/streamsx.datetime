/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2011, 2014  
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with
# IBM Corp.
*/

/**
 * Support for conversion between date and time representations,
 * such as converting minutes to seconds.
 */
 
namespace com.ibm.streamsx.datetime.convert;

/**
 * Convert whole days to seconds as a `float64`.
 * This is useful for readable values in
 * a time based window definitions or
 * `float64` operator parameters that represent seconds.
 * For example:
 *     // Set the retention to be five days
 *     parameter retain: days(5);
 * 
 * @param days Days to convert to seconds
 */
public float64 days(int32 days) {
    return days((float64) days);
}

/**
 * Convert days to seconds as a `float64`.
 * This is useful for readable values in
 * a time based window definitions or
 * `float64` operator parameters that represent seconds.
 * For example:
 *     // Set the timeout to be one and a half days
 *     parameter timeout: days(1.5);
 * 
 *  @param days Days to convert to seconds
 */
public float64 days(float32 days) {
    return hours(days * 24.0);
}

/**
 * Convert whole hours to seconds as a `float64`.
 * This is useful for readable values in
 * a time based window definitions or
 * `float64` operator parameters that represent seconds.
 * For example:
 *     // Sliding window with a two hour eviction policy
 *     // and five minute trigger policy
 *     window IN: sliding, time(hours(2)), time(minutes(5));
 * 
 *  @param hours Hours to convert to seconds
 */
public float64 hours(int32 hours) {
    return hours((float64) hours);
}

/**
 * Convert hours to seconds as a `float64`.
 * This is useful for readable values in
 * a time based window definitions or
 * `float64` operator parameters that represent seconds.
 * For example:
 *     // Set the period to be two hours
 *     parameter period: hours(2);
 * 
 * @param hours Hours to convert to seconds
 */
public float64 hours(float64 hours) {
    return minutes(hours * 60.0);
}

/**
 * Convert whole minutes to seconds as a `float64`.
 * This is useful for readable values in
 * a time based window definitions or
 * `float64` operator parameters that represent seconds.
 * For example:
 *     // Set the period to be five minutes
 *     parameter period: minutes(5);
 * 
 * @param minutes Minutes to convert to seconds
 */
public float64 minutes(int32 minutes) {
    return minute((float64) minutes);
}

/**
 * Convert minutes to seconds as a `float64`.
 * This is useful for readable values in
 * a time based window definitions or
 * `float64` operator parameters that represent seconds.
 * For example:
 * 
 *     // Tumbling window with a two and half minute eviction policy
 *     window IN: tumbling, time(minutes(2.5));
 * 
 * @param minutes Minutes to convert to seconds
 */
public float64 minutes(float64 minutes) {
    return minutes * 60.0;
}

/**
 * Convert whole seconds to seconds as a `float64`.
 * This is useful for readable values in
 * a time based window definitions or
 * `float64` operator parameters that represent seconds.
 * For example:
 * 
 *     // Tumbling window with 3 second eviction policy
 *     window IN: tumbling, time(seconds(3));
 * 
 * @param seconds Number of seconds to return
 */
public float64 seconds(int32 seconds) {
    return seconds;
}

/**
 * Returns the same value.
 * This is useful for readable values in
 * a time based window definitions or
 * `float64` operator parameters that represent seconds.
 * For example:
 * 
 *     // Tumbling window with 3 second eviction policy
 *     window IN: tumbling, time(seconds(3.5));
 * 
 * @param seconds Number of seconds to return
 */
public float64 seconds(float64 seconds) {
    return seconds;
}

/**
* Convert a timestamp into an string ISO format
* use 'man strptime' to get the list of available format
*/

public rstring timestampToISO(timestamp dtime)
{
    mutable Sys.tm timetuple = { } ;
    time(dtime, timetuple) ;
    /*
    * %Y The year, including century (for example, 1991).
    * %m The month number (1-12).
    * %d or %e The day of month (1-31).
    */
    rstring dateString = strftime(timetuple, "%Y-%m-%d") ;

    /*
    * %T        Equivalent to %H:%M:%S
    */
    rstring timeString = strftime(timetuple, "%T") ;
    /*
     *  %z     An RFC-822/ISO 8601 standard timezone specification.
     */
r    string timeZoneString = strftime(timetuple, "%z") ;


    float64 milliseconds =(float64) getNanoseconds(dtime) / 1000000f ;
    return dateString + "T" + timeString + "." +(rstring)((uint32) milliseconds) + timeZoneString ;

}
